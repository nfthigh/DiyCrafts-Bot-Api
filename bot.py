# bot.py
import os
import logging
import asyncio
import sqlite3
import uuid
import requests
import threading
import time
import json
from datetime import datetime

from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ChatType
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

# –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ config.py –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è CONFIG_CONTENT
if not os.path.exists("config.py"):
    config_content = os.getenv("CONFIG_CONTENT")
    if config_content:
        with open("config.py", "w") as f:
            f.write(config_content)
    else:
        raise Exception("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è CONFIG_CONTENT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

import config  # –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫

API_TOKEN = config.TELEGRAM_BOT_TOKEN
ADMIN_CHAT_IDS = config.ADMIN_CHAT_IDS
GROUP_CHAT_ID = config.GROUP_CHAT_ID
SELF_URL = config.SELF_URL

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(
        parse_mode="HTML",
        link_preview_is_disabled=False,
        protect_content=False
    )
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ—Ç –∂–µ —Ñ–∞–π–ª, —á—Ç–æ –∏ –¥–ª—è payment_api)
conn = sqlite3.connect('clients.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS clients (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    contact TEXT,
    name TEXT
)
''')
cursor.execute('''
CREATE TABLE IF NOT EXISTS orders (
    order_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    product TEXT,
    quantity INTEGER,
    design_text TEXT,
    design_photo TEXT,
    location_lat REAL,
    location_lon REAL,
    cost_info TEXT,
    status TEXT,
    merchant_trans_id TEXT,
    order_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    delivery_comment TEXT,
    admin_price REAL,
    payment_url TEXT,
    is_paid INTEGER DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES clients (user_id)
)
''')
conn.commit()

class OrderForm(StatesGroup):
    contact = State()
    name = State()
    product = State()
    quantity = State()
    text_design = State()
    photo_design = State()
    location = State()
    delivery_comment = State()

class AdminPriceState(StatesGroup):
    waiting_for_price = State()

def get_main_keyboard(is_admin=False, is_registered=False):
    builder = ReplyKeyboardBuilder()
    builder.button(text='üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞')
    builder.button(text='üìç –ù–∞—à–∞ –ª–æ–∫–∞—Ü–∏—è')
    builder.button(text='üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã')
    if not is_registered:
        builder.button(text='üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True)
    if is_admin:
        builder.button(text='üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö')
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

location_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', request_location=True)],
        [KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')]
    ],
    resize_keyboard=True
)

def get_product_keyboard():
    products = ["–ö—Ä—É–∂–∫–∞", "–ë—Ä–µ–ª–æ–∫", "–ö–µ–ø–∫–∞", "–í–∏–∑–∏—Ç–∫–∞", "–§—É—Ç–±–æ–ª–∫–∞", "–•—É–¥–∏", "–ü–∞–∑–ª", "–ö–∞–º–µ–Ω—å", "–°—Ç–∞–∫–∞–Ω"]
    builder = InlineKeyboardBuilder()
    for product in products:
        builder.button(text=product, callback_data=f'product_{product}')
    builder.adjust(2)
    return builder.as_markup()

@router.message(Command("start"))
async def send_welcome(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    cursor.execute("SELECT name, contact, username FROM clients WHERE user_id=?", (user_id,))
    client = cursor.fetchone()
    is_admin = user_id in ADMIN_CHAT_IDS
    if message.chat.type != ChatType.PRIVATE:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    if client:
        user_name = client[0] if client[0] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        welcome_message = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
        await message.answer(welcome_message, reply_markup=get_main_keyboard(is_admin, True))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=get_product_keyboard())
        await state.set_state(OrderForm.product)
    else:
        welcome_message = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        builder = ReplyKeyboardBuilder()
        builder.button(text='üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True)
        keyboard = builder.as_markup(resize_keyboard=True)
        await message.answer(welcome_message, reply_markup=keyboard)
        await state.set_state(OrderForm.contact)

@router.message(StateFilter(OrderForm.contact), F.content_type == types.ContentType.CONTACT)
async def register_contact(message: types.Message, state: FSMContext):
    user_contact = message.contact.phone_number
    await state.update_data(contact=user_contact)
    builder = ReplyKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
    keyboard = builder.as_markup(resize_keyboard=True)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=keyboard)
    await state.set_state(OrderForm.name)

@router.message(StateFilter(OrderForm.contact))
async def handle_contact_prompt(message: types.Message):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.")

@router.message(StateFilter(OrderForm.name))
async def register_name(message: types.Message, state: FSMContext):
    user_name = message.text.strip()
    if not user_name:
        await message.reply("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    await state.update_data(name=user_name)
    user_id = message.from_user.id
    user_username = message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    data = await state.get_data()
    contact = data.get('contact')
    cursor.execute("""
        INSERT INTO clients (user_id, username, contact, name)
        VALUES (?, ?, ?, ?)
        ON CONFLICT(user_id) DO UPDATE SET username=excluded.username, contact=excluded.contact, name=excluded.name
    """, (user_id, user_username, contact, user_name))
    conn.commit()
    await state.clear()
    is_admin = user_id in ADMIN_CHAT_IDS
    await message.answer(f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, {user_name}!", reply_markup=get_main_keyboard(is_admin, True))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=get_product_keyboard())
    await state.set_state(OrderForm.product)

@router.callback_query(lambda c: c.data and c.data.startswith('product_'), StateFilter(OrderForm.product))
async def process_product_selection(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    product = callback_query.data.split('_', 1)[1]
    await state.update_data(product=product)
    builder = ReplyKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
    keyboard = builder.as_markup(resize_keyboard=True)
    await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {product}. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=keyboard)
    await state.set_state(OrderForm.quantity)

@router.message(StateFilter(OrderForm.quantity))
async def handle_quantity(message: types.Message, state: FSMContext):
    quantity = message.text.strip()
    if not quantity.isdigit() or int(quantity) <= 0:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
        return
    await state.update_data(quantity=int(quantity))
    builder = ReplyKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
    keyboard = builder.as_markup(resize_keyboard=True)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–¥–ø–∏—Å—å –¥–ª—è –¥–∏–∑–∞–π–Ω–∞:", reply_markup=keyboard)
    await state.set_state(OrderForm.text_design)

@router.message(StateFilter(OrderForm.text_design))
async def handle_text_design(message: types.Message, state: FSMContext):
    design_text = message.text.strip()
    await state.update_data(design_text=design_text)
    builder = InlineKeyboardBuilder()
    builder.button(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='skip_photo')
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
    keyboard = builder.as_markup()
    await message.reply("–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –¥–∏–∑–∞–π–Ω–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:", reply_markup=keyboard)
    await state.set_state(OrderForm.photo_design)

@router.callback_query(lambda c: c.data == 'skip_photo', StateFilter(OrderForm.photo_design))
async def skip_photo_design(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.update_data(design_photo=None)
    await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é:", reply_markup=location_keyboard)
    await state.set_state(OrderForm.location)

@router.message(StateFilter(OrderForm.photo_design), F.content_type.in_({types.ContentType.PHOTO, types.ContentType.DOCUMENT}))
async def handle_photo_design(message: types.Message, state: FSMContext):
    file_id = None
    if message.photo:
        file_id = message.photo[-1].file_id
    elif message.document:
        file_id = message.document.file_id
    await state.update_data(design_photo=file_id)
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é:", reply_markup=location_keyboard)
    await state.set_state(OrderForm.location)

@router.message(StateFilter(OrderForm.location), F.content_type == types.ContentType.LOCATION)
async def handle_location(message: types.Message, state: FSMContext):
    location = message.location
    await state.update_data(location=location)
    builder = InlineKeyboardBuilder()
    builder.button(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data='skip_comment')
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
    keyboard = builder.as_markup()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–æ—Å—Ç–∞–≤–∫–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:", reply_markup=keyboard)
    await state.set_state(OrderForm.delivery_comment)

@router.message(StateFilter(OrderForm.delivery_comment))
async def handle_delivery_comment(message: types.Message, state: FSMContext):
    delivery_comment = message.text.strip()
    await state.update_data(delivery_comment=delivery_comment)
    await send_order_to_admin(message.from_user.id, state)

@router.callback_query(lambda c: c.data == 'skip_comment', StateFilter(OrderForm.delivery_comment))
async def skip_delivery_comment(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.update_data(delivery_comment="–ù–µ —É–∫–∞–∑–∞–Ω")
    await send_order_to_admin(callback_query.from_user.id, state)

async def send_order_to_admin(user_id, state: FSMContext):
    data = await state.get_data()
    product = data.get('product')
    quantity = data.get('quantity')
    design_text = data.get('design_text')
    design_photo = data.get('design_photo')
    location = data.get('location')
    delivery_comment = data.get('delivery_comment') or "–ù–µ —É–∫–∞–∑–∞–Ω"
    cursor.execute("SELECT name, contact, username FROM clients WHERE user_id=?", (user_id,))
    client = cursor.fetchone()
    if client:
        user_name = client[0] if client[0] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        user_contact = client[1] if client[1] else "–ù–µ —É–∫–∞–∑–∞–Ω"
        user_username = client[2] if client[2] else "–ù–µ —É–∫–∞–∑–∞–Ω"
    else:
        user_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        user_contact = "–ù–µ —É–∫–∞–∑–∞–Ω"
        user_username = "–ù–µ —É–∫–∞–∑–∞–Ω"
    order_time = datetime.now().strftime('%Y-%m-%d %H:%M')
    cursor.execute("""
        INSERT INTO orders (user_id, product, quantity, design_text, design_photo,
        location_lat, location_lon, order_time, delivery_comment, status)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, '–û–∂–∏–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è')
    """, (
        user_id, product, quantity, design_text, design_photo,
        location.latitude, location.longitude, order_time, delivery_comment
    ))
    conn.commit()
    order_id = cursor.lastrowid
    order_message = (
        f"üì£ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}</b> üì£\n\n"
        f"üë§ <b>–ó–∞–∫–∞–∑—á–∏–∫:</b> {user_name} (@{user_username}, {user_contact})\n"
        f"üì¶ <b>–ü—Ä–æ–¥—É–∫—Ç:</b> {product}\n"
        f"üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity}\n"
        f"üìù <b>–î–∏–∑–∞–π–Ω:</b> {design_text}\n"
        f"üóíÔ∏è <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {delivery_comment}"
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{order_id}")
    builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order_id}")
    markup = builder.as_markup()
    recipients = ADMIN_CHAT_IDS + [GROUP_CHAT_ID]
    for chat_id in recipients:
        try:
            await bot.send_message(chat_id, order_message, reply_markup=markup)
            await bot.send_location(chat_id, latitude=location.latitude, longitude=location.longitude)
            if design_photo:
                await bot.send_document(chat_id, design_photo)
        except Exception as e:
            logger.error(f"Error sending order to chat {chat_id}: {e}")
    await bot.send_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=get_main_keyboard(user_id in ADMIN_CHAT_IDS, True))
    await state.clear()

@router.callback_query(lambda c: c.data and c.data.startswith("approve_"))
async def approve_order(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    order_id = int(callback_query.data.split('_')[1])
    admin_id = callback_query.from_user.id
    if admin_id not in ADMIN_CHAT_IDS:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    cursor.execute("UPDATE orders SET status='–û–∂–∏–¥–∞–Ω–∏–µ —Ü–µ–Ω—ã' WHERE order_id=?", (order_id,))
    conn.commit()
    await state.update_data(order_id=order_id)
    await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} (–≤ —Å—É–º–º–∞—Ö):")
    await state.set_state(AdminPriceState.waiting_for_price)

@router.message(AdminPriceState.waiting_for_price)
async def process_admin_price(message: types.Message, state: FSMContext):
    price_text = message.text.strip()
    if not price_text.isdigit():
        await message.reply("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    # –¶–µ–Ω–∞ –≤–≤–æ–¥–∏—Ç—Å—è –≤ —Å—É–º–º–∞—Ö; –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ –ø–µ—Ä–µ–¥–∞–µ–º —Å—É–º–º—É –∫–∞–∫ –µ—Å—Ç—å,
    # –∞ –¥–ª—è —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –≤ —Ç–∏–π–∏–Ω—ã (1 —Å—É–º = 100 —Ç–∏–π–∏–Ω–æ–≤)
    admin_price_sum = float(price_text)
    admin_price_tiyin = admin_price_sum * 100
    data = await state.get_data()
    order_id = data.get('order_id')
    if not order_id:
        await message.reply("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    cursor.execute("UPDATE orders SET admin_price=? WHERE order_id=?", (admin_price_sum, order_id))
    conn.commit()
    cursor.execute("SELECT user_id, product, quantity FROM orders WHERE order_id=?", (order_id,))
    result = cursor.fetchone()
    if not result:
        await message.reply("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    client_id, product, quantity = result
    total_amount_sum = admin_price_sum * quantity  # –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –≤ —Å—É–º–º–∞—Ö (–±–µ–∑ —É–º–Ω–æ–∂–µ–Ω–∏—è)
    total_amount = total_amount_sum  # –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ –ø–µ—Ä–µ–¥–∞–µ–º —Å—É–º–º—É –≤ —Å—É–º–º–∞—Ö
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data=f"client_accept_order_{order_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"client_cancel_order_{order_id}")]
    ])
    await bot.send_message(client_id, 
        f"–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ–¥–æ–±—Ä–µ–Ω!\n–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {admin_price_sum} —Å—É–º (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ {admin_price_tiyin} —Ç–∏–π–∏–Ω–æ–≤).\n"
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_amount_sum} —Å—É–º (–¥–ª—è –∏–Ω–≤–æ–π—Å–∞: {total_amount} —Å—É–º).\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–∫–∞–∑?",
        reply_markup=inline_kb
    )
    await message.reply("–¶–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
    await state.clear()

@router.callback_query(lambda c: c.data and c.data.startswith("client_accept_order_"))
async def client_accept_order(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    order_id = int(callback_query.data.split('_')[-1])
    cursor.execute("UPDATE orders SET status='–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã' WHERE order_id=?", (order_id,))
    conn.commit()
    cursor.execute("SELECT admin_price, product, quantity, user_id FROM orders WHERE order_id=?", (order_id,))
    result = cursor.fetchone()
    if not result:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    admin_price_sum, product, quantity, user_id = result
    unit_price_tiyin = admin_price_sum * 100
    total_amount = unit_price_tiyin * quantity
    total_amount_sum = admin_price_sum * quantity
    import uuid
    merchant_trans_id = f"order_{order_id}_{uuid.uuid4().hex[:6]}"
    cursor.execute("UPDATE orders SET merchant_trans_id=? WHERE order_id=?", (merchant_trans_id, order_id))
    conn.commit()
    cursor.execute("SELECT contact FROM clients WHERE user_id=?", (user_id,))
    client_data = cursor.fetchone()
    client_phone = client_data[0] if client_data and client_data[0] else ""
    BASE_URL = f"{config.SELF_URL}/click-api"
    payload = {
        "merchant_trans_id": merchant_trans_id,
        "amount": total_amount_sum,  # –ø–µ—Ä–µ–¥–∞–µ–º —Å—É–º–º—É –≤ —Å—É–º–º–∞—Ö
        "phone_number": client_phone
    }
    try:
        response = requests.post(f"{BASE_URL}/create_invoice", json=payload, timeout=30)
        invoice_response = response.json()
        print("Invoice response:", invoice_response)  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
        payment_url = invoice_response.get("payment_url")
        if not payment_url and invoice_response.get("invoice_id"):
            invoice_id = invoice_response["invoice_id"]
            payment_url = f"https://api.click.uz/pay/invoice/{invoice_id}"
        if not payment_url:
            await callback_query.message.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞. –î–µ—Ç–∞–ª–∏: " + json.dumps(invoice_response), parse_mode=None)
            return
        cursor.execute("UPDATE orders SET payment_url=? WHERE order_id=?", (payment_url, order_id))
        conn.commit()
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)]
        ])
        await callback_query.message.edit_text(
            f"–ó–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {admin_price_sum} —Å—É–º (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ {unit_price_tiyin} —Ç–∏–π–∏–Ω–æ–≤).\n"
            f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_amount_sum} —Å—É–º ({total_amount} —Ç–∏–π–∏–Ω–æ–≤).\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.",
            reply_markup=inline_kb
        )
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}", parse_mode=None)

@router.callback_query(lambda c: c.data and c.data.startswith("client_cancel_order_"))
async def client_cancel_order(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    order_id = int(callback_query.data.split('_')[-1])
    cursor.execute("UPDATE orders SET status='–û—Ç–º–µ–Ω—ë–Ω –∫–ª–∏–µ–Ω—Ç–æ–º' WHERE order_id=?", (order_id,))
    conn.commit()
    await callback_query.message.edit_text(f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω –∫–ª–∏–µ–Ω—Ç–æ–º.")

@router.callback_query(lambda c: c.data and c.data.startswith("reject_"))
async def reject_order(callback_query: types.CallbackQuery):
    await callback_query.answer()
    order_id = int(callback_query.data.split('_')[1])
    admin_id = callback_query.from_user.id
    if admin_id not in ADMIN_CHAT_IDS:
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    cursor.execute("UPDATE orders SET status='–û—Ç–∫–ª–æ–Ω–µ–Ω–æ' WHERE order_id=?", (order_id,))
    conn.commit()
    cursor.execute("SELECT user_id FROM orders WHERE order_id=?", (order_id,))
    result = cursor.fetchone()
    if result:
        client_id = result[0]
        await bot.send_message(client_id, f"–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    await callback_query.answer("–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω.", show_alert=True)

def bot_autopinger():
    while True:
        time.sleep(300)
        if SELF_URL:
            try:
                print("[BOT AUTO-PING] –ü–∏–Ω–≥—É–µ–º:", SELF_URL)
                requests.get(SELF_URL, timeout=10)
            except Exception as e:
                print("[BOT AUTO-PING] –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞:", e)
        else:
            print("[BOT AUTO-PING] SELF_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ...")

def run_bot_autopinger():
    thread = threading.Thread(target=bot_autopinger, daemon=True)
    thread.start()

async def main():
    run_bot_autopinger()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
