import os
import sys
import logging
import asyncio
import hashlib
import time
import uuid
from datetime import datetime
from dotenv import load_dotenv
import requests

from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ChatType
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

import psycopg2
from psycopg2.extras import RealDictCursor

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (stdout ‚Äì –ª–æ–≥–∏ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤ Render)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s: %(message)s",
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not API_TOKEN:
    raise Exception("TELEGRAM_BOT_TOKEN –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ .env")
DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    raise Exception("DATABASE_URL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
MERCHANT_USER_ID = os.getenv("MERCHANT_USER_ID")
SECRET_KEY = os.getenv("SECRET_KEY")
SERVICE_ID = os.getenv("SERVICE_ID")
MERCHANT_ID = os.getenv("MERCHANT_ID")

ADMIN_CHAT_IDS = os.getenv("ADMIN_CHAT_IDS")
if ADMIN_CHAT_IDS:
    ADMIN_CHAT_IDS = [int(x.strip()) for x in ADMIN_CHAT_IDS.split(",") if x.strip()]
else:
    ADMIN_CHAT_IDS = []
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID")
SELF_URL = os.getenv("SELF_URL")
RETURN_URL = os.getenv("RETURN_URL")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
try:
    db_conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    db_conn.autocommit = True
    db_cursor = db_conn.cursor(cursor_factory=RealDictCursor)
    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ (–±–æ—Ç).")
except Exception as e:
    logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL (–±–æ—Ç): %s", e)
    raise

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã orders —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º merchant_trans_id
create_clients_table = """
CREATE TABLE IF NOT EXISTS clients (
    user_id BIGINT PRIMARY KEY,
    username TEXT,
    contact TEXT,
    name TEXT
)
"""
create_orders_table = """
CREATE TABLE IF NOT EXISTS orders (
    order_id SERIAL PRIMARY KEY,
    user_id BIGINT,
    merchant_trans_id TEXT,
    product TEXT,
    quantity INTEGER,
    design_text TEXT,
    design_photo TEXT,
    location_lat REAL,
    location_lon REAL,
    status TEXT,
    payment_amount INTEGER,
    order_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    delivery_comment TEXT
)
"""
try:
    db_cursor.execute(create_clients_table)
    db_cursor.execute(create_orders_table)
    logger.info("–¢–∞–±–ª–∏—Ü—ã clients –∏ orders —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç (–±–æ—Ç).")
except Exception as e:
    logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü (–±–æ—Ç): %s", e)
    raise

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
try:
    db_cursor.execute("ALTER TABLE orders ADD COLUMN IF NOT EXISTS payment_amount INTEGER;")
    db_cursor.execute("ALTER TABLE orders ADD COLUMN IF NOT EXISTS merchant_prepare_id BIGINT;")
    db_cursor.execute("ALTER TABLE orders ADD COLUMN IF NOT EXISTS merchant_trans_id TEXT;")
    db_conn.commit()
    logger.info("–°—Ç–æ–ª–±—Ü—ã payment_amount, merchant_prepare_id –∏ merchant_trans_id –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã (–±–æ—Ç).")
except Exception as e:
    logger.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤: %s", e)

# FSM –¥–ª—è –∑–∞–∫–∞–∑–∞
class OrderForm(StatesGroup):
    contact = State()
    name = State()
    product = State()
    quantity = State()
    text_design = State()
    photo_design = State()
    location = State()
    delivery_comment = State()

# FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î (–∞–¥–º–∏–Ω)
class DBManagementState(StatesGroup):
    waiting_for_client_id = State()
    waiting_for_order_id = State()

# FSM –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã (–ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞)
class OrderApproval(StatesGroup):
    waiting_for_payment_sum = State()

def get_main_keyboard(is_admin=False, is_registered=False):
    builder = ReplyKeyboardBuilder()
    builder.button(text='üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞')
    builder.button(text='üìç –ù–∞—à–∞ –ª–æ–∫–∞—Ü–∏—è')
    builder.button(text='üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã')
    if not is_registered:
        builder.button(text='üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True)
    if is_admin:
        builder.button(text='üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö')
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

location_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', request_location=True)],
        [KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')]
    ],
    resize_keyboard=True
)

def get_product_keyboard():
    products = ["–ö—Ä—É–∂–∫–∞", "–ë—Ä–µ–ª–æ–∫", "–ö–µ–ø–∫–∞", "–í–∏–∑–∏—Ç–∫–∞", "–§—É—Ç–±–æ–ª–∫–∞", "–•—É–¥–∏", "–ü–∞–∑–ª", "–ö–∞–º–µ–Ω—å", "–°—Ç–∞–∫–∞–Ω"]
    builder = InlineKeyboardBuilder()
    for product in products:
        builder.button(text=product, callback_data=f'product_{product}')
    builder.adjust(2)
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è Click API (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞)
def generate_auth_header():
    timestamp = str(int(time.time()))
    digest = hashlib.sha1((timestamp + SECRET_KEY).encode('utf-8')).hexdigest()
    return f"{MERCHANT_USER_ID}:{digest}:{timestamp}"

# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ Click API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞
def create_invoice(amount, phone_number, merchant_trans_id):
    url = "https://api.click.uz/v2/merchant/invoice/create"
    headers = {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "Auth": generate_auth_header()
    }
    payload = {
        "service_id": SERVICE_ID,
        "amount": amount,
        "phone_number": phone_number,
        "merchant_trans_id": merchant_trans_id
    }
    try:
        response = requests.post(url, json=payload, headers=headers, timeout=10)
        logger.info("Click API invoice response: %s", response.json())
        return response.json()
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Click API: %s", e)
        return {"error_code": -99, "error_note": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Click API"}

# –ü—Ä–∏–º–µ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
products_data = {
    "–ö—Ä—É–∂–∫–∞": {
        "SPIC": "06912001036000000",
        "PackageCode": "1184747",
        "CommissionInfo": {"TIN": "307022362"}
    },
    "–ë—Ä–µ–ª–æ–∫": {
        "SPIC": "07117001015000000",
        "PackageCode": "1156259",
        "CommissionInfo": {"TIN": "307022362"}
    },
    "–ö–µ–ø–∫–∞": {
        "SPIC": "06506001022000000",
        "PackageCode": "1324746",
        "CommissionInfo": {"TIN": "307022362"}
    },
    "–í–∏–∑–∏—Ç–∫–∞": {
        "SPIC": "04911001003000000",
        "PackageCode": "1156221",
        "CommissionInfo": {"TIN": "307022362"}
    },
    "–§—É—Ç–±–æ–ª–∫–∞": {
        "SPIC": "06109001001000000",
        "PackageCode": "1124331",
        "CommissionInfo": {"TIN": "307022362"}
    },
    "–•—É–¥–∏": {
        "SPIC": "06212001012000000",
        "PackageCode": "1238867",
        "CommissionInfo": {"TIN": "307022362"}
    },
    "–ü–∞–∑–ª": {
        "SPIC": "04811001019000000",
        "PackageCode": "1748791",
        "CommissionInfo": {"TIN": "307022362"}
    },
    "–ö–∞–º–µ–Ω—å": {
        "SPIC": "04911001017000000",
        "PackageCode": "1156234",
        "CommissionInfo": {"TIN": "307022362"}
    },
    "–°—Ç–∞–∫–∞–Ω": {
        "SPIC": "07013001008000000",
        "PackageCode": "1345854",
        "CommissionInfo": {"TIN": "307022362"}
    }
}

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø—Ä–∏–º–µ—Ä)
def build_fiscal_item(order):
    product = order.get("product")
    quantity = order.get("quantity")
    total_price = order.get("payment_amount")
    if not total_price or not quantity:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏.")
    unit_price = round(total_price / quantity)
    vat = round((total_price / 1.12) * 0.12)
    product_info = products_data.get(product)
    if not product_info:
        raise ValueError(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{product}'.")
    return {
        "Name": f"{product} (—à—Ç)",
        "SPIC": product_info["SPIC"],
        "Units": 1,
        "PackageCode": product_info["PackageCode"],
        "GoodPrice": unit_price,
        "Price": total_price,
        "Amount": quantity,
        "VAT": vat,
        "VATPercent": 12,
        "CommissionInfo": product_info["CommissionInfo"]
    }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(
        parse_mode="HTML",
        link_preview_is_disabled=False,
        protect_content=False
    )
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---

@router.message(Command("start"))
async def send_welcome(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    cur = db_conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("SELECT name, contact, username FROM clients WHERE user_id = %s", (user_id,))
    client = cur.fetchone()
    is_admin = user_id in ADMIN_CHAT_IDS
    if message.chat.type != ChatType.PRIVATE:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    if client:
        user_name = client.get("name") or "–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç"
        welcome_message = f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–æ–≤."
        await message.answer(welcome_message, reply_markup=get_main_keyboard(is_admin, True))
        await message.answer("üåü –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞:", reply_markup=get_product_keyboard())
        await state.set_state(OrderForm.product)
    else:
        welcome_message = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        builder = ReplyKeyboardBuilder()
        builder.button(text='üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True)
        keyboard = builder.as_markup(resize_keyboard=True)
        await message.answer(welcome_message, reply_markup=keyboard)
        await state.set_state(OrderForm.contact)

@router.message(StateFilter(OrderForm.contact), F.content_type == types.ContentType.CONTACT)
async def register_contact(message: types.Message, state: FSMContext):
    user_contact = message.contact.phone_number
    await state.update_data(contact=user_contact)
    builder = ReplyKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
    keyboard = builder.as_markup(resize_keyboard=True)
    await message.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=keyboard)
    await state.set_state(OrderForm.name)

@router.message(StateFilter(OrderForm.contact))
async def handle_contact_prompt(message: types.Message):
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É 'üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç'.")

@router.message(StateFilter(OrderForm.name))
async def register_name(message: types.Message, state: FSMContext):
    if not message.text:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è.")
        return
    user_name = message.text.strip()
    if not user_name:
        await message.reply("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    user_id = message.from_user.id
    user_username = message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    data = await state.get_data()
    contact = data.get('contact')
    cur = db_conn.cursor()
    cur.execute("""
        INSERT INTO clients (user_id, username, contact, name)
        VALUES (%s, %s, %s, %s)
        ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, contact = EXCLUDED.contact, name = EXCLUDED.name
    """, (user_id, user_username, contact, user_name))
    db_conn.commit()
    await state.clear()
    is_admin = user_id in ADMIN_CHAT_IDS
    await message.answer(f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, {user_name}!", reply_markup=get_main_keyboard(is_admin, True))
    await message.answer("üåü –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞:", reply_markup=get_product_keyboard())
    await state.set_state(OrderForm.product)

@router.callback_query(lambda c: c.data and c.data.startswith('product_'), StateFilter(OrderForm.product))
async def process_product_selection(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    product = callback_query.data.split('_', 1)[1]
    await state.update_data(product=product)
    builder = ReplyKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
    keyboard = builder.as_markup(resize_keyboard=True)
    await callback_query.message.answer(f"‚ú® –í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{product}</b>!\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—à—Ç.):", reply_markup=keyboard)
    await state.set_state(OrderForm.quantity)

@router.message(StateFilter(OrderForm.quantity))
async def handle_quantity(message: types.Message, state: FSMContext):
    quantity = message.text.strip()
    if not quantity.isdigit() or int(quantity) <= 0:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
        return
    await state.update_data(quantity=int(quantity))
    builder = ReplyKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
    keyboard = builder.as_markup(resize_keyboard=True)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥–∏–∑–∞–π–Ω–∞:", reply_markup=keyboard)
    await state.set_state(OrderForm.text_design)

@router.message(StateFilter(OrderForm.text_design))
async def handle_text_design(message: types.Message, state: FSMContext):
    design_text = message.text.strip()
    await state.update_data(design_text=design_text)
    builder = InlineKeyboardBuilder()
    builder.button(text='üì∏ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='skip_photo')
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
    keyboard = builder.as_markup()
    await message.reply("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –¥–∏–∑–∞–π–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:", reply_markup=keyboard)
    await state.set_state(OrderForm.photo_design)

@router.callback_query(lambda c: c.data == 'skip_photo', StateFilter(OrderForm.photo_design))
async def skip_photo_design(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.update_data(design_photo=None)
    await callback_query.message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –ª–æ–∫–∞—Ü–∏–µ–π:", reply_markup=location_keyboard)
    await state.set_state(OrderForm.location)

@router.message(StateFilter(OrderForm.photo_design), F.content_type.in_({types.ContentType.PHOTO, types.ContentType.DOCUMENT}))
async def handle_photo_design(message: types.Message, state: FSMContext):
    file_id = message.photo[-1].file_id if message.photo else message.document.file_id
    await state.update_data(design_photo=file_id)
    await message.reply("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –ª–æ–∫–∞—Ü–∏–µ–π:", reply_markup=location_keyboard)
    await state.set_state(OrderForm.location)

@router.message(StateFilter(OrderForm.location), F.content_type == types.ContentType.LOCATION)
async def handle_location(message: types.Message, state: FSMContext):
    location = message.location
    await state.update_data(location=location)
    builder = InlineKeyboardBuilder()
    builder.button(text='üí¨ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data='skip_comment')
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
    keyboard = builder.as_markup()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–æ—Å—Ç–∞–≤–∫–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:", reply_markup=keyboard)
    await state.set_state(OrderForm.delivery_comment)

@router.message(StateFilter(OrderForm.delivery_comment))
async def handle_delivery_comment(message: types.Message, state: FSMContext):
    delivery_comment = message.text.strip()
    await state.update_data(delivery_comment=delivery_comment)
    await send_order_to_admin(message.from_user.id, state)

@router.callback_query(lambda c: c.data == 'skip_comment', StateFilter(OrderForm.delivery_comment))
async def skip_delivery_comment(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.update_data(delivery_comment="–ù–µ —É–∫–∞–∑–∞–Ω")
    await send_order_to_admin(callback_query.from_user.id, state)

async def send_order_to_admin(user_id, state: FSMContext):
    data = await state.get_data()
    product = data.get('product')
    quantity = data.get('quantity')
    design_text = data.get('design_text')
    design_photo = data.get('design_photo')
    location = data.get('location')
    delivery_comment = data.get('delivery_comment') or "–ù–µ —É–∫–∞–∑–∞–Ω"

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π merchant_trans_id –≤ –≤–∏–¥–µ UUID
    merchant_trans_id = str(uuid.uuid4())

    cur = db_conn.cursor(cursor_factory=RealDictCursor)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    cur.execute("SELECT name, contact, username FROM clients WHERE user_id = %s", (user_id,))
    client = cur.fetchone()
    if client:
        user_name = client.get("name") or "–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç"
        user_contact = client.get("contact") or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        user_username = client.get("username") or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    else:
        user_name = "–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç"
        user_contact = "–Ω–µ —É–∫–∞–∑–∞–Ω"
        user_username = "–Ω–µ —É–∫–∞–∑–∞–Ω"

    order_time = datetime.now().strftime('%Y-%m-%d %H:%M')
    # –ü—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π merchant_trans_id
    cur.execute("""
        INSERT INTO orders (user_id, merchant_trans_id, product, quantity, design_text, design_photo,
            location_lat, location_lon, order_time, delivery_comment, status)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
    """, (user_id, merchant_trans_id, product, quantity, design_text, design_photo,
          location.latitude, location.longitude, order_time, delivery_comment, "–û–∂–∏–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è"))
    db_conn.commit()
    cur.execute("SELECT order_id, merchant_trans_id FROM orders WHERE user_id = %s ORDER BY order_time DESC LIMIT 1", (user_id,))
    order_row = cur.fetchone()
    order_id = order_row["order_id"] if order_row else None
    merchant_trans_id = order_row["merchant_trans_id"] if order_row else merchant_trans_id
    if not order_id:
        await bot.send_message(user_id, "üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
        return

    order_message = (
        f"üíé –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order_id}\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {user_name} (@{user_username}, {user_contact})\n"
        f"üì¶ –¢–æ–≤–∞—Ä: {product}\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n"
        f"üìù –î–∏–∑–∞–π–Ω: {design_text}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {delivery_comment}"
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"approve_{order_id}")
    builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"reject_{order_id}")
    markup = builder.as_markup()
    for chat_id in ADMIN_CHAT_IDS + ([int(GROUP_CHAT_ID)] if GROUP_CHAT_ID else []):
        try:
            await bot.send_message(chat_id, order_message, reply_markup=markup)
            await bot.send_location(chat_id, latitude=location.latitude, longitude=location.longitude)
            if design_photo:
                await bot.send_document(chat_id, design_photo)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ —á–∞—Ç {chat_id}: {e}")
    await bot.send_message(user_id, "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                           reply_markup=get_main_keyboard(user_id in ADMIN_CHAT_IDS, True))
    await state.clear()

@router.callback_query(lambda c: c.data and c.data.startswith("approve_"))
async def approve_order(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    order_id = int(callback_query.data.split('_')[1])
    admin_id = callback_query.from_user.id
    if admin_id not in ADMIN_CHAT_IDS:
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    await state.update_data(approval_order_id=order_id)
    await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}:")
    await state.set_state(OrderApproval.waiting_for_payment_sum)

@router.message(OrderApproval.waiting_for_payment_sum)
async def process_payment_sum(message: types.Message, state: FSMContext):
    text = message.text.strip()
    try:
        payment_sum = float(text)
    except ValueError:
        await message.reply("üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (—Å—É–º–º—É).")
        return
    data = await state.get_data()
    order_id = data.get("approval_order_id")
    if not order_id:
        await message.reply("–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    cur = db_conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("UPDATE orders SET status = %s, payment_amount = %s WHERE order_id = %s", ("–û–¥–æ–±—Ä–µ–Ω", int(payment_sum), order_id))
    db_conn.commit()
    cur.execute("SELECT * FROM orders WHERE order_id = %s", (order_id,))
    order = cur.fetchone()
    if not order:
        await message.reply("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        await state.clear()
        return
    cur.execute("SELECT contact FROM clients WHERE user_id = %s", (order["user_id"],))
    client = cur.fetchone()
    phone_number = client["contact"] if client and client.get("contact") else ""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π merchant_trans_id –∏–∑ –∑–∞–∫–∞–∑–∞
    merchant_trans_id = order.get("merchant_trans_id")
    invoice_response = create_invoice(int(payment_sum), phone_number, merchant_trans_id)
    if invoice_response.get("error_code") == 0:
        invoice_id = invoice_response.get("invoice_id")
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ —Å—Ö–µ–º–µ:
        # https://my.click.uz/services/pay?service_id=<service_id>&merchant_id=<merchant_id>&amount=<amount>&transaction_param=<merchant_trans_id>&return_url=<return_url>&signature=<signature>
        action = "0"
        sign_time = time.strftime("%Y-%m-%d %H:%M:%S")
        signature_string = f"{merchant_trans_id}{SERVICE_ID}{SECRET_KEY}{payment_sum}{action}{sign_time}"
        signature = hashlib.md5(signature_string.encode('utf-8')).hexdigest()
        payment_url = (
            f"https://my.click.uz/services/pay?"
            f"service_id={SERVICE_ID}&merchant_id={MERCHANT_ID}&amount={payment_sum}"
            f"&transaction_param={merchant_trans_id}&return_url={RETURN_URL}&signature={signature}"
        )
        try:
            await bot.send_message(order["user_id"],
                                   f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} –æ–¥–æ–±—Ä–µ–Ω!\n–°—É–º–º–∞: {payment_sum} —Å—É–º.\n–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{payment_url}")
            await message.reply("–ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω, —Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –∫–ª–∏–µ–Ω—Ç—É: {e}")
            await message.reply("–ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –∫–ª–∏–µ–Ω—Ç—É.")
    else:
        await message.reply(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {invoice_response.get('error_note')}")
    await state.clear()

@router.callback_query(lambda c: c.data and c.data.startswith("reject_"))
async def reject_order(callback_query: types.CallbackQuery):
    await callback_query.answer()
    order_id = int(callback_query.data.split('_')[1])
    admin_id = callback_query.from_user.id
    if admin_id not in ADMIN_CHAT_IDS:
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    cur = db_conn.cursor()
    cur.execute("UPDATE orders SET status = %s WHERE order_id = %s", ("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", order_id))
    db_conn.commit()
    cur.execute("SELECT user_id FROM orders WHERE order_id = %s", (order_id,))
    result = cur.fetchone()
    if result:
        await bot.send_message(result["user_id"], f"üö´ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    await callback_query.answer("–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω.", show_alert=True)
    await callback_query.message.edit_text(f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

@router.message(lambda message: message.text == "üìç –ù–∞—à–∞ –ª–æ–∫–∞—Ü–∏—è")
async def send_static_location(message: types.Message):
    await message.answer_location(latitude=41.306584, longitude=69.308076)

@router.message(lambda message: message.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def show_my_orders(message: types.Message):
    user_id = message.from_user.id
    cur = db_conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("SELECT order_id, product, quantity, order_time, status FROM orders WHERE user_id = %s ORDER BY order_time DESC", (user_id,))
    orders_list = cur.fetchall()
    if not orders_list:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", reply_markup=get_main_keyboard(user_id in ADMIN_CHAT_IDS, True))
        return
    response_lines = []
    for order in orders_list:
        status = order["status"] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
        order_time = order["order_time"].strftime('%Y-%m-%d %H:%M')
        line = f"‚Ññ{order['order_id']}: {order['product']} x{order['quantity']} | {status} | {order_time}"
        response_lines.append(line)
    response_text = "üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n" + "\n".join(response_lines)
    await message.answer(response_text, reply_markup=get_main_keyboard(user_id in ADMIN_CHAT_IDS, True))

@router.message(lambda message: message.text == "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
async def db_management_menu(message: types.Message):
    if message.from_user.id not in ADMIN_CHAT_IDS:
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î.")
        return
    builder = InlineKeyboardBuilder()
    builder.button(text="–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="db_delete_client")
    builder.button(text="–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="db_delete_order")
    builder.button(text="–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑—ã", callback_data="db_clear_orders")
    builder.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=builder.as_markup())

@router.callback_query(lambda c: c.data == "db_delete_client")
async def db_delete_client(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ user_id –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(DBManagementState.waiting_for_client_id)

@router.message(DBManagementState.waiting_for_client_id)
async def process_client_deletion(message: types.Message, state: FSMContext):
    user_id_text = message.text.strip()
    if not user_id_text.isdigit():
        await message.answer("User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    user_id = int(user_id_text)
    cur = db_conn.cursor()
    cur.execute("DELETE FROM clients WHERE user_id = %s", (user_id,))
    db_conn.commit()
    await message.answer(f"–ö–ª–∏–µ–Ω—Ç —Å user_id={user_id} —É–¥–∞–ª—ë–Ω (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª).", reply_markup=get_main_keyboard(message.from_user.id in ADMIN_CHAT_IDS, True))
    await state.clear()

@router.callback_query(lambda c: c.data == "db_delete_order")
async def db_delete_order(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ order_id –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(DBManagementState.waiting_for_order_id)

@router.message(DBManagementState.waiting_for_order_id)
async def process_order_deletion(message: types.Message, state: FSMContext):
    order_id_text = message.text.strip()
    if not order_id_text.isdigit():
        await message.answer("Order ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    order_id = int(order_id_text)
    cur = db_conn.cursor()
    cur.execute("DELETE FROM orders WHERE order_id = %s", (order_id,))
    db_conn.commit()
    await message.answer(f"–ó–∞–∫–∞–∑ —Å order_id={order_id} —É–¥–∞–ª—ë–Ω (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª).", reply_markup=get_main_keyboard(message.from_user.id in ADMIN_CHAT_IDS, True))
    await state.clear()

@router.callback_query(lambda c: c.data == "db_clear_orders")
async def db_clear_orders(callback_query: types.CallbackQuery):
    await callback_query.answer()
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤", callback_data="db_clear_orders_confirm")
    builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data="db_clear_orders_cancel")
    await callback_query.message.answer("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã?", reply_markup=builder.as_markup())

@router.callback_query(lambda c: c.data == "db_clear_orders_confirm")
async def db_clear_orders_confirm(callback_query: types.CallbackQuery):
    await callback_query.answer()
    cur = db_conn.cursor()
    cur.execute("DELETE FROM orders")
    db_conn.commit()
    await callback_query.message.edit_text("–í—Å–µ –∑–∞–∫–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã.")

@router.callback_query(lambda c: c.data == "db_clear_orders_cancel")
async def db_clear_orders_cancel(callback_query: types.CallbackQuery):
    await callback_query.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback_query.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
